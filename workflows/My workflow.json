{
  "active": true,
  "connections": {
    "YouTube": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interval": {
      "main": [
        [
          {
            "node": "YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-09-20T15:00:22.700Z",
  "id": "ZfSqkpM6WqxJcu6Q",
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "4df045aa-941b-49a3-a290-9700e310b2e7",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        860,
        280
      ]
    },
    {
      "parameters": {
        "resource": "playlistItem",
        "operation": "getAll",
        "playlistId": "=LL",
        "limit": 10,
        "options": {}
      },
      "name": "YouTube",
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        1080,
        420
      ],
      "id": "40aeca8e-301b-402d-b813-44fd3d281211",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "RwrVLdpLatZ6XoZv",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const staticData = getWorkflowStaticData('global');\nconst lastItemId = staticData.lastItemId;\n\nconsole.log('lastItemId', lastItemId);\nconst firstItem = items[0];\nlet newItems = [];\n\nfunction getId(item) {\n  return item.json.contentDetails.videoId;\n}\n\nif (lastItemId) {\n  for (const item of items) {\n    if (getId(item) === lastItemId) {\n      break;\n    }\n    newItems.push(item)\n  }\n} else {\n  newItems = [firstItem]\n}\n\nstaticData.lastItemId = getId(firstItem)\nreturn newItems.reverse()"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        420
      ],
      "id": "207f4f96-fc56-46be-87b6-13a263eee601"
    },
    {
      "parameters": {
        "chatId": "@birdggrecord",
        "text": "=▶️ {{$json[\"snippet\"][\"title\"]}} #youtube\n\nhttps://www.youtube.com/watch?v={{$json[\"contentDetails\"][\"videoId\"]}}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1480,
        420
      ],
      "id": "008d2713-a026-4158-9ef6-42f943cd514f",
      "credentials": {
        "telegramApi": {
          "id": "XZKuUNpLdrX2ox4K",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "interval": 10,
        "unit": "minutes"
      },
      "name": "Interval",
      "type": "n8n-nodes-base.interval",
      "typeVersion": 1,
      "position": [
        860,
        620
      ],
      "id": "c6c6c8fb-07c1-4789-a360-8cda3fd22065"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "global": {
      "lastItemId": "MGemhK9t44Q"
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2023-09-27T14:50:37.085Z",
  "versionId": "5b9a5e76-2b7b-46a6-aec4-66758ddf633f"
}